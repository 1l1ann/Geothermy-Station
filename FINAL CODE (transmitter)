//libraries
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <Ethernet.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <VirtualWire.h>

#define DS1307_I2C_ADDRESS 0x68 // the I2C address of Tiny RTC
#define ONE_WIRE_BUS 14
#define pinEth 10
#define pinSD 4

byte frequency = 0, station = 0, hour1 = 0, minute1 = 0, second1 = 0, month1 = 0, dayOfMonth1 = 0, year1 = 0;
int ttw = 0;
OneWire ds(ONE_WIRE_BUS);

float temp1 = 0.0;
float temp2 = 0.0;
float temp3 = 0.0;
float temp4 = 0.0;

unsigned long startMillis;
unsigned long currentMillis;

//-------------------------------------------------------------------------------
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; //Setting MAC Address
char server[] = "api.pushingbox.com"; //pushingbox API server

IPAddress ip(192, 168, 1, 2);
EthernetClient client;
String data;
boolean koneksi = false;
//------------------------------------------------------------------------------
const byte BUFFER_SIZE = 32;

File myFile;

byte second, minute, hour, dayOfWeek, dayOfMonth, month, year;

void setup() {
  Serial.begin(115200);
  char buffer[BUFFER_SIZE], *key, *value;
  byte i, buffer_lenght, line_counter = 0;
  pinMode(pinEth, OUTPUT);
  pinMode(pinSD, OUTPUT);
  Wire.begin();

  //----------------Setup----ETHERNET-----------------
  digitalWrite(pinEth, LOW);
  digitalWrite(pinSD, HIGH);
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    Ethernet.begin(mac, ip);
  }
  //--------------------------------------------------

  //--------------Setup--CARTE-SD-----------------------
  digitalWrite(pinEth, HIGH);
  digitalWrite(pinSD, LOW);
  Serial.print("Initializing SD card...");

  if (!SD.begin(pinSD)) {
    Serial.println("initialization failed!");
    while (1);
  }

  Serial.println("initialization done.");

  if (SD.exists("1.txt")) {
    Serial.println("1.txt exists.");
  } else {
    Serial.println("1.txt doesn't exist.");
    Serial.println("Creating 1.txt...");
    if (SD.exists("1.txt")) {
      Serial.println("1.txt exists.");
    } else {
      Serial.println("1.txt doesn't exist.");
    }
  }
  File config_file = SD.open("config.txt", FILE_READ);
  if (!config_file) { // G√®re les erreurs
    Serial.println("Erreur d'ouverture du fichier !");
    for (;;);
  }

  /* Tant que non fin de fichier */
  while (config_file.available() > 0 ) {

    /* R√©cup√®re une ligne enti√®re dans le buffer */
    i = 0;
    while ((buffer[i++] = config_file.read()) != '\n') {

      /* Si la ligne d√©passe la taille du buffer */
      if (i == BUFFER_SIZE) {

        /* On finit de lire la ligne mais sans stocker les donn√©es */
        while (config_file.read() != '\n');
        break; // Et on arr√™te la lecture de cette ligne
      }
    }

    /* On garde de c√¥t√© le nombre de char stock√© dans le buffer */
    buffer_lenght = i;

    /* Gestion des lignes trop grande */
    if (i == BUFFER_SIZE) {
      Serial.print("Ligne trop longue √† la ligne ");
      Serial.println(line_counter, DEC);
    }

    /* Finalise la chaine de caract√©res ASCIIZ en supprimant le \n au passage */
    buffer[--i] = '\0';

    /* Incr√©mente le compteur de lignes */
    ++line_counter;

    /* Ignore les lignes vides ou les lignes de commentaires */
    if (buffer[0] == '\0' || buffer[0] == '#') continue;

    /* Cherche l'emplacement de la clef en ignorant les espaces et les tabulations en d√©but de ligne */
    i = 0;
    while (buffer[i] == ' ' || buffer[i] == '\t') {
      if (++i == buffer_lenght) break; // Ignore les lignes contenant uniquement des espaces et/ou des tabulations
    }
    if (i == buffer_lenght) continue; // G√®re les lignes contenant uniquement des espaces et/ou des tabulations
    key = &buffer[i];

    /* Cherche l'emplacement du s√©parateur = en ignorant les espaces et les tabulations √¢pres la clef */
    while (buffer[i] != '=') {

      /* Ignore les espaces et les tabulations */
      if (buffer[i] == ' ' || buffer[i] == '\t') buffer[i] = '\0';

      if (++i == buffer_lenght) {
        Serial.print("Ligne mal forme a la ligne ");
        Serial.println(line_counter, DEC);
        break; // Ignore les lignes mal form√©
      }
    }
    if (i == buffer_lenght) continue; // G√®re les lignes mal form√©

    /* Transforme le s√©parateur = en \0 et continue */
    buffer[i++] = '\0';

    /* Cherche l'emplacement de la valeur en ignorant les espaces et les tabulations √¢pres le s√©parateur */
    while (buffer[i] == ' ' || buffer[i] == '\t') {
      if (++i == buffer_lenght) {
        Serial.print("Ligne mal forme a la ligne ");
        Serial.println(line_counter, DEC);
        break; // Ignore les lignes mal form√©
      }
    }
    if (i == buffer_lenght) continue; // G√®re les lignes mal form√©
    value = &buffer[i];

    /* Transforme les donn√©es texte en valeur utilisable */
    /* C'est ce morceaux de code qu'il vous faudra adapter pour votre application <img draggable="false" class="emoji" alt="üòâ" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/svg/1f609.svg" scale="0"> */
    if (strcmp(key, "frequency") == 0) {
      frequency = atoi(value);
    }
    else if (strcmp(key, "station") == 0) {
      station = atoi(value);
    }
    else if (strcmp(key, "hour") == 0) {
      hour1 = atoi(value);
    }
    else if (strcmp(key, "minute") == 0) {
      minute1 = atoi(value);
    }
    else if (strcmp(key, "second") == 0) {
      second1 = atoi(value);
    }
    else if (strcmp(key, "month") == 0) {
      month1 = atoi(value);
    }
    else if (strcmp(key, "dayOfMonth") == 0) {
      dayOfMonth1 = atoi(value);
    }
    else if (strcmp(key, "year") == 0) {
      year1 = atoi(value);
    }
    else { // Default
      Serial.print("Clef inconnu ");
      Serial.println(key);
    }

  }

  /* Ferme le fichier de configuration */
  config_file.close();

  ttw = 86400000 / frequency;
  //--------------------------------------------------

  //------------SETUP--FM-------------------------------
  vw_set_tx_pin(53);
  vw_setup(2000);
  //----------------------------------------------------

  //------------Setup--TIME-----------------------------
  setDateDs1307();
  //----------------------------------------------------
}

void loop() {
  getDateDs1307();
  
  Serial.print("MEASURE PER DAY = ");
  Serial.println(frequency);
  Serial.print("STATION NUMBER = ");
  Serial.println(station);
  Serial.println(" ");

  temp1 =  temp();
  temp2 =  temp();
  temp3 =  temp();
  temp4 =  temp();
  temp();

  Serial.println("Temperature measure : ");
  Serial.print("Sensor 1 : ");
  Serial.println(temp1);
  Serial.print("Sensor 2 : ");
  Serial.println(temp2);
  Serial.print("Sensor 3 : ");
  Serial.println(temp3);
  Serial.print("Sensor 4 : ");
  Serial.println(temp4);

  digitalWrite(pinEth, LOW);
  digitalWrite(pinSD, HIGH);
  Serial.println("connecting...");
  if (client.connect(server, 80)) {
    kemasData1();
    sendData();
    Serial.println("Temperature send");
    koneksi = true; //connected = true
  }
  else {
    Serial.println("connection failed");
  }
  while (koneksi) {
    if (client.available()) {
      char c = client.read(); //save http header to c
      Serial.print(c); //print http header to serial monitor
    }
    if (!client.connected()) {
      Serial.println();
      Serial.println("disconnecting.");
      client.stop();
      koneksi = false;
      data = ""; //data reset
    }
  }

  digitalWrite(pinEth, HIGH);
  digitalWrite(pinSD, LOW);
  myFile = SD.open("1.txt", FILE_WRITE);
  if (myFile) {
    myFile.println("Temperature measure : ");
    myFile.print("Sensor 1 : ");
    myFile.print(temp1);
    myFile.println(" ¬∞C");
    myFile.print("Sensor 2 : ");
    myFile.print(temp2);
    myFile.println(" ¬∞C");
    myFile.print("Sensor 3 : ");
    myFile.print(temp3);
    myFile.println(" ¬∞C");
    myFile.print("Sensor 4 : ");
    myFile.print(temp4);
    myFile.println(" ¬∞C");
    myFile.close();
  }
  else {
    Serial.println("error opening 1.txt for temperature");
  }


  vw_send((byte *) &temp1, sizeof(temp1));
  vw_wait_tx();
  vw_send((byte *) &temp2, sizeof(temp2));
  vw_wait_tx();
  vw_send((byte *) &temp3, sizeof(temp3));
  vw_wait_tx();
  vw_send((byte *) &temp4, sizeof(temp4));
  vw_wait_tx();

  delay(ttw);
}

// Fonction qui envoie les donn√©es sur le Google Sheet
void kemasData1() {
  data += "";
  data += "GET /pushingbox?devid=vAB9C7B48C944888&Temperature1="; //GET request query to pushingbox API
  data += temp1;
  data += "&Temperature2=";
  data += temp2;
  data += "&Temperature3=";
  data += temp3;
  data += "&Temperature4=";
  data += temp4;
  data += " HTTP/1.1";
}

// Fonction qui envoie les donn√©es √† PushingBox
void sendData() {
  Serial.println("connected");
  client.println(data);
  client.println("Host: api.pushingbox.com");
  client.println("Connection: close");
  client.println();
}

// Fonction pour configurer la date et l'heure
void setDateDs1307() {
  second = second1;
  minute = minute1;
  hour = hour1;
  dayOfWeek = 3;
  dayOfMonth = dayOfMonth1;
  month = month1;
  year = year1;

  Wire.beginTransmission(DS1307_I2C_ADDRESS);
  Wire.write(decToBcd(0));
  Wire.write(decToBcd(second));
  // 0 to bit 7 starts the clock
  Wire.write(decToBcd(minute));
  Wire.write(decToBcd(hour));
  // If you want 12 hour am/pm you need to set
  // bit 6 (also need to change readDateDs1307)
  Wire.write(decToBcd(dayOfWeek));
  Wire.write(decToBcd(dayOfMonth));
  Wire.write(decToBcd(month));
  Wire.write(decToBcd(year));
  Wire.endTransmission();
}

// Convert normal decimal numbers to binary coded decimal
byte decToBcd(byte val) {
  return ( (val / 10 * 16) + (val % 10) );
}

// Convert binary coded decimal to normal decimal numbers
byte bcdToDec(byte val) {
  return ( (val / 16 * 10) + (val % 16) );
}

// Fonction qui permet d'obtenir la date et l'heure depuis le DS1307, puis imprime le r√©sultat
void getDateDs1307() {
  // Reset the register pointer
  Wire.beginTransmission(DS1307_I2C_ADDRESS);
  Wire.write(decToBcd(0));
  Wire.endTransmission();
  Wire.requestFrom(DS1307_I2C_ADDRESS, 7);
  second = bcdToDec(Wire.read() & 0x7f);
  minute = bcdToDec(Wire.read());
  hour = bcdToDec(Wire.read() & 0x3f);
  // Need to change this if 12 hour am/pm
  dayOfWeek = bcdToDec(Wire.read());
  dayOfMonth = bcdToDec(Wire.read());
  month = bcdToDec(Wire.read());
  year = bcdToDec(Wire.read());
  Serial.print(hour, DEC);
  Serial.print(":");
  Serial.print(minute, DEC);
  Serial.print(":");
  Serial.print(second, DEC);
  Serial.print(" ");
  Serial.print(month, DEC);
  Serial.print("/");
  Serial.print(dayOfMonth, DEC);
  Serial.print("/");
  Serial.print(year, DEC);
  Serial.println(" ");

  digitalWrite(pinEth, HIGH);
  digitalWrite(pinSD, LOW);
  myFile = SD.open("1.txt", FILE_WRITE);
  if (myFile) {
    myFile.print(hour, DEC);
    myFile.print(":");
    myFile.print(minute, DEC);
    myFile.print(":");
    myFile.print(second, DEC);
    myFile.print(" ");
    myFile.print(month, DEC);
    myFile.print("/");
    myFile.print(dayOfMonth, DEC);
    myFile.print("/");
    myFile.print(year, DEC);
    myFile.println(" ");
    myFile.close();
  }
  else {
    // if the file didn't open, print an error:
    Serial.println("error opening test.txt for the date");
  }
}

float temp() {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;

  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    //    delay(250);
    return;
  }

  if (OneWire::crc8(addr, 7) != addr[7]) {
    return;
  }
  switch (addr[0]) {
    case 0x10:
      type_s = 1;
      break;
    case 0x28:
      type_s = 0;
      break;
    case 0x22:
      type_s = 0;
      break;
    default:
      return;
  }

  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);
  present = ds.reset();
  ds.select(addr);
  ds.write(0xBE);

  for ( i = 0; i < 9; i++) {
    data[i] = ds.read();
  }

  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3;
    if (data[7] == 0x10) {
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    if (cfg == 0x00) raw = raw & ~7;
    else if (cfg == 0x20) raw = raw & ~3;
    else if (cfg == 0x40) raw = raw & ~1;

  }
  celsius = (float)raw / 16.0;
  return celsius;
}
